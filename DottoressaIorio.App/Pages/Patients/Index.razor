@page "/patients"
@using DottoressaIorio.App.Models
@using DottoressaIorio.App.Data
@inject ApplicationDbContext dbContext
@inject NavigationManager navigationManager

<PageTitle>Patients</PageTitle>
<h1>Patients</h1>


<div class="mb-3">
    <label for="search" class="form-label">Search</label>
    <input type="text" class="form-control" id="search" @bind="searchTerm" @oninput="SearchPatients"/>
</div>

@if (displayedPatients == null || displayedPatients.Count == 0)
{
    <p>No patients found.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Patient</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var patient in displayedPatients)
        {
            <tr>
                <td>
                    <a href="/patient/@patient.PatientId">@patient.Title @patient.FirstName @patient.LastName</a>
                </td>
                <td>
                    <button class="btn btn-primary" @onclick="() => NavigateToEditPatient(patient.PatientId)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => NavigateToDeletePatient(patient.PatientId)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
    <nav aria-label="Patients Pagination">
        <ul class="pagination">
            <li class="page-item" @onclick="PreviousPage" disabled="@IsFirstPage">
                <a class="page-link" href="#" @onclick:preventDefault>Previous</a>
            </li>
            <li class="page-item">
                <span class="page-link">Page @currentPage of @totalPages</span>
            </li>
            <li class="page-item" @onclick="NextPage" disabled="@IsLastPage">
                <a class="page-link" href="#" @onclick:preventDefault>Next</a>
            </li>
        </ul>
    </nav>
}


@code {
    List<Patient> patients;
    private List<Patient> displayedPatients;
    private List<Patient> filteredPatients;
    private readonly int pageSize = 5; // Number of patients per page
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)filteredPatients.Count / pageSize);
    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == totalPages;
    private string searchTerm = "";

    protected override void OnInitialized()
    {
        patients = dbContext.Patients.ToList();
        UpdateDisplayedPatients();
    }

    private void UpdateDisplayedPatients()
    {
        FilterPatientsBySearchTerm();
        var startIndex = (currentPage - 1) * pageSize;
        displayedPatients = filteredPatients.Skip(startIndex).Take(pageSize).ToList();
    }

    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            currentPage--;
            UpdateDisplayedPatients();
        }
    }

    private void NextPage()
    {
        if (!IsLastPage)
        {
            currentPage++;
            UpdateDisplayedPatients();
        }
    }

    private void NavigateToEditPatient(int patientId)
    {
        navigationManager.NavigateTo($"/patients/edit/{patientId}");
    }

    private void NavigateToDeletePatient(int id)
    {
        navigationManager.NavigateTo($"/patients/delete/{id}");
    }

    private void FilterPatientsBySearchTerm()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredPatients = patients;
        }

        searchTerm = searchTerm.ToLower();
        filteredPatients = patients.Where(p =>
            p.FirstName.ToLower().Contains(searchTerm) ||
            p.LastName.ToLower().Contains(searchTerm)
        ).ToList();
    }

    private void SearchPatients(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        UpdateDisplayedPatients();
    }
}