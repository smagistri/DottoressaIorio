@page "/patients/edit/{id:int}/therapies/create"

@inject TherapyTemplateRepository templateRepository
@inject PatientTherapyRepository repository
@inject NavigationManager navigationManager

<PageTitle>Aggiungi Terapia</PageTitle>
<h1>Aggiungi Terapia</h1>

<a href="/patient/@Id/therapies">Torna indietro</a>
<hr class="my-4">
<EditForm Model="@model" OnValidSubmit="@SaveAsync">
    <DataAnnotationsValidator />
    <div class="row g-3">
        <div class="col-12">
            <label for="TemplateId">Precompilato:</label>
            <select id="TemplateId" @onchange="TemplateChanged" class="form-control">
                <option value="0">Seleziona...</option>
                @foreach (var template in templates)
                {
                    <option value="@template.Id">@template.Title</option>
                }
            </select>
        </div>
    </div>
    <div class="row g-3">
        <div class="col-12">
            <label for="Description">Descrizione:</label>
            <InputTextArea id="Description" @bind-Value="model.Description" class="form-control" />
            <ValidationMessage For="@(() => model.Description)" />
        </div>
    </div>
    <hr class="my-4">
    <button type="submit" class="w-100 btn btn-primary btn-lg">Salva</button>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    private readonly Therapy model = new();
    private IList<TherapyTemplate> templates;

    protected override async Task OnInitializedAsync()
    {
        templates = await templateRepository.GetAllOrderedAsync();
    }

    private async Task SaveAsync()
    {
        model.PatientId = Id;
        await  repository.AddAsync(model); 
        navigationManager.NavigateTo($"/patient/{Id}/therapies");
    }

    private async Task TemplateChanged(ChangeEventArgs args)
    {
        int.TryParse(args.Value?.ToString(), out var id);
        var selected = await templateRepository.GetByIdAsync(id);
        model.Description = selected.Description;
    }
}