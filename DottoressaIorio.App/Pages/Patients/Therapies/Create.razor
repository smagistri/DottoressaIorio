@page "/patients/edit/{id:int}/therapies/create"
@using DottoressaIorio.App.Models
@using DottoressaIorio.App.Data
@inject ApplicationDbContext dbContext
@inject NavigationManager navigationManager
 
<PageTitle>Create Therapy</PageTitle>
<h1>Create Therapy</h1>

<EditForm Model="@therapy" OnValidSubmit="@CreateTherapy">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label for="TemplateId">Template:</label>
        <select id="TemplateId" @onchange="TemplateChange" class="form-control">
            <option value="0">Please select...</option>
            @foreach (var template in templates)
            {
                <option value="@template.Id">@template.Title</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label for="Description">Description:</label>
        <InputTextArea id="Description" @bind-Value="therapy.Description" class="form-control"/>
    </div>
    <button type="submit" class="btn btn-primary">Create</button>
    <a class="btn btn-secondary" href="/patient/@Id">Cancel</a>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    private readonly Therapy therapy = new();
    private List<TherapyTemplate> templates;

    protected override void OnInitialized()
    {
        templates = dbContext.TherapyTemplates.ToList();
    }

    private async Task CreateTherapy()
    {
        therapy.PatientId = Id;
        dbContext.Therapies.Add(therapy);
        await dbContext.SaveChangesAsync();
        navigationManager.NavigateTo($"/patient/{Id}/");
    }

    private void TemplateChange(ChangeEventArgs args)
    {
        var selected = templates.First(x => x.Id.ToString() == args.Value?.ToString());
        therapy.Description = selected.Description;
    }
}