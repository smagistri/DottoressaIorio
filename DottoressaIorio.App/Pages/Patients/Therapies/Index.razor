@page "/patient/{patientId:int}/therapies"
@using Microsoft.EntityFrameworkCore
@using DottoressaIorio.App.Models
@using DottoressaIorio.App.Services
@using DottoressaIorio.App.Data
@inject ApplicationDbContext dbContext
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject PdfService pdfService

<PageTitle>@patient.Title @patient.FirstName @patient.LastName</PageTitle>
<h1>@patient.Title @patient.FirstName @patient.LastName</h1>
<hr class="my-4">

@if (patient == null)
{
    <p>ID paziente non valido o paziente non trovato.</p>
}
else
{
    <div>
        <p>
            <strong>Data di Nascita:</strong> @patient.DateOfBirth?.ToShortDateString()
        </p>
        <p>
            <strong>Email:</strong> <a href="mailto:@patient.Email">@patient.Email</a>
        </p>
        @if (patient.PlaceOfBirth != null)
        {
            <p>
                <strong>Luogo di Nascita:</strong> @patient.PlaceOfBirth
            </p>
        }
        @if (patient.Gender != null)
        {
            <p>
                <strong>Sesso:</strong> @patient.Gender
            </p>
        }
        @if (patient.PhoneNumber != null)
        {
            <p>
                <strong>Numero di telefono:</strong> <a href="tel:@patient.PhoneNumber">@patient.PhoneNumber</a>
            </p>
        }
    </div>
    <hr class="my-4">
    <h3>Terapie</h3>
    <a class="btn btn-outline-primary" href="/patients/edit/@PatientId/therapies/create">
        Aggiungi
    </a>
    @if (therapies != null && therapies.Any())
    {
        <hr class="my-4">
        <table class="table">
            <thead>
            <tr>
                <th>Data inizio terapia</th>
                <th>Azioni</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var t in therapies)
            {
                <tr>
                    <td>
                        <a href="/therapies/edit/@t.TherapyId">
                            @t.CreatedDate.ToString("dd/MM/yyyy")
                        </a>
                    </td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => PrintAsync(t.TherapyId)">Scarica</button>
                        <button class="btn btn-danger" @onclick="() => NavigateToDeleteTherapy(t.TherapyId)">Rimuovi</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
}

@code {
    private Patient patient;

    [Parameter] public int PatientId { get; set; }
    private List<Therapy> therapies;


    protected override async Task OnParametersSetAsync()
    {
        patient = await dbContext.Patients.FindAsync(PatientId);
        therapies = dbContext.Therapies
            .Include(x => x.Patient)
            .Where(t => !t.Deleted && t.PatientId == PatientId)
            .ToList();
    }

    private async Task PrintAsync(int id)
    {
        var therapy = dbContext.Therapies.FirstOrDefault(t => t.TherapyId == id);

        if (therapy != null)
        {
            var pdfBytes = pdfService.GenerateTherapyPdf(therapy);

            // Convert the PDF bytes to a Base64 string
            var pdfBase64 = Convert.ToBase64String(pdfBytes);

            var filename = $"{patient.FirstName}_{patient.LastName}_{therapy.CreatedDate:yy_MM_dd}_{DateTime.Now.ToFileTimeUtc()}.pdf";
            // Open the PDF in a new tab
            await jsRuntime.InvokeVoidAsync("jsSaveAsFile", filename, pdfBase64);
        }
    }

    private void NavigateToDeleteTherapy(int id)
    {
        navigationManager.NavigateTo($"/therapies/delete/{id}");
    }

}