@page "/patients/edit/{id:int}"
@inject ApplicationDbContext dbContext
@inject NavigationManager navigationManager

@using DottoressaIorio.App.Models

@using DottoressaIorio.App.Data
@using Microsoft.EntityFrameworkCore

<PageTitle>Modifica Paziente</PageTitle>
<h1>Modifica Paziente</h1>

<a href="/patients">Torna indietro</a>

<hr class="my-4">
@if (model == null)
{
    <p>ID paziente non valido o paziente non trovato.</p>
}
else
{
    <EditForm Model="model" OnValidSubmit="@UpdatePatient" class="needs-validation" novalidate>
        <DataAnnotationsValidator />
        <div class="row g-3">
            <div class="col-12">
                <label for="Title">Title</label>
                <select id="Title" @bind="model.Title" class="form-select">
                    <option value="" selected>Seleziona...</option>
                    <option value="Sig.re">Signore</option>
                    <option value="Sig.ra">Signora</option>
                    <option value="Dott.">Dottore</option>
                    <option value="Dott.ssa">Dottoressa</option>
                    <option value="Proff.">Professore</option>
                    <option value="Proff.essa">Professoressa</option>
                </select>
            </div>
        </div>
        <div class="row g-3">
            <div class="col-12">
                <label>Nome:*</label>
                <InputText id="FirstName" @bind-Value="model.FirstName" class="form-control" />
                <ValidationMessage For="@(() => model.FirstName)" />
            </div>
        </div>
        <div class="row g-3">
            <div class="col-12">
                <label>Cognome:*</label>
                <InputText id="LastName" @bind-Value="model.LastName" class="form-control" />
                <ValidationMessage For="@(() => model.LastName)" />
            </div>
        </div>
        <div class="row g-3">
            <div class="col-12">
                <label>Data di Nascita (es: 31/12/1979):*</label>
                <input type="date" class="form-control" @bind="model.DateOfBirth" />
                <ValidationMessage For="@(() => model.DateOfBirth)" />
            </div>
        </div>
        <div class="row g-3">
            <div class="col-12">
                <label>Luogo di Nascita:*</label>
                <InputText id="PlaceOfBirth" @bind-Value="model.PlaceOfBirth" class="form-control" />
            </div>
        </div>
        <div class="row g-3">
            <div class="col-12">
                <label>Sesso</label>
                <select @bind="model.Gender" class="form-select">
                    <option value="" selected>Seleziona...</option>
                    <option value="Sig.re">Maschile</option>
                    <option value="Sig.ra">Femminile</option>
                </select>
            </div>
        </div>
        <div class="row g-3">
            <div class="col-12">
                <label>Numero di telefono:</label>
                <input type="tel" class="form-control" @bind="model.PhoneNumber">
            </div>
        </div>

        <div class="form-group">
            <label>Indirizzo email:*</label>
            <input type="email" class="form-control" @bind="model.Email" placeholder="name@example.com" />
            <ValidationMessage For="@(() => model.Email)" />
        </div>
        <hr class="my-4">
        <button type="submit" class="w-100 btn btn-primary btn-lg">Salva</button>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Patient model;
     
    protected override async Task OnParametersSetAsync()
    {
        model = await dbContext.Patients.FindAsync(Id);

        // Detach the entity if it is already being tracked by the context
        dbContext.Entry(model).State = EntityState.Detached;
    }

    private async Task UpdatePatient()
    {
        model.EditDate = DateTime.Now;
        dbContext.Patients.Update(model);
        await dbContext.SaveChangesAsync();
        navigationManager.NavigateTo("/patients");
    }
}